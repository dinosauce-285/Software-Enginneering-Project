// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Định nghĩa các Enums để đảm bảo dữ liệu nhất quán
enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
}

enum AccessLevel {
  PUBLIC
  PRIVATE
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  MONTHLY
  ONCE
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}


model User {
  userID       String   @id @default(uuid())
  email        String   @unique
  display_name String   
  avatar       String?
  passwordHash  String?
  auth_provider String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  role Role    @default(USER)

  passwordResetOtp      String? 
  passwordResetExpires  DateTime?
  otpVerificationToken  String?   @unique

  gender        Gender
  dateOfBirth   DateTime 

  emailNotificationsEnabled Boolean @default(true)
  reminderTime              Int     @default(9)

  memories     Memory[]
  reminders    Reminder[]
  reports      Report[]

  failedLoginAttempts Int      @default(0)
  lockUntil     DateTime?
  
  usernameLastChangedAt DateTime?

}

model Emotion {
  emotionID String @id @default(uuid())
  name      String @unique // Tên cảm xúc nên là duy nhất
  symbol    String

  memories  Memory[]
}

model Memory {
  memoryID    String   @id @default(uuid())
  title       String
  content     String

  memoryDate  DateTime
  
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User     @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID      String
  
  emotion     Emotion  @relation(fields: [emotionID], references: [emotionID])
  emotionID   String

  media       Media[]
  shareLinks  ShareLink[]
  memoryTags  MemoryTag[]
  location    String?
}

model Media {
  mediaID    String    @id @default(uuid())
  url        String
  publicId   String    @unique
  type       MediaType
  caption    String?
  upload_at  DateTime  @default(now())

  memory     Memory    @relation(fields: [memoryID], references: [memoryID], onDelete: Cascade)
  memoryID   String
}

model ShareLink {
  shareID         String       @id @default(uuid())
  url             String       @unique
  access_level    AccessLevel
  expiration_date DateTime?

  memory          Memory       @relation(fields: [memoryID], references: [memoryID], onDelete: Cascade)
  memoryID        String
}

model Reminder {
  reminderID String   @id @default(uuid())
  content    String   // Nội dung do AI tạo ra
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID     String
}

model Report {
  reportID     String @id @default(uuid())
  month        Int
  summary_text String

  user         User   @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID       String
}

model Tag {
  tagID      String      @id @default(uuid())
  name       String      @unique // Tên tag nên là duy nhất

  memoryTags MemoryTag[]
}

// Bảng trung gian cho quan hệ nhiều-nhiều
model MemoryTag {
  memory   Memory @relation(fields: [memoryID], references: [memoryID], onDelete: Cascade)
  memoryID String
  
  tag      Tag    @relation(fields: [tagID], references: [tagID], onDelete: Cascade)
  tagID    String

  @@id([memoryID, tagID])
}

model ActivityLog {
  id      String   @id @default(uuid())
  name    String
  email   String
  action  String
  target  String
  date    DateTime @default(now())
  avatar  String
}